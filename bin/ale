#!/usr/bin/env python

#LEGACY - wrenlab.ncbi.geo.label
#WIP - wrenlab.text.label_extraction.evaluation

#suppress warnings
import warnings
warnings.filterwarnings("ignore")

from wrenlab.ncbi.geo import label
from wrenlab.text.label_extraction import evaluation
import click

#TODO broken values of the WIP label extraction
#use wrenlab.ncbi.geo.get_labels for the old method

@click.command()
@click.argument("output")
@click.option("--taxon",default=9606,help="Taxon ID for labels to be searched for. Defaults to 9606 (Homo sapiens)")
@click.option("--delimiter",default=",",help="Set 1-character delimiter for output file. Defaults to csv.")
@click.option("--platform",default=None,help="Filter extracted labels by GEO Platform ID")
@click.option("--tissue",default=None,help="Filter extracted labels by BTO Tissue ID")
def write_labels(taxon,output,delimiter,platform,tissue):
    """This script returns extracted GEO labels for a given NCBI Taxon ID to an output file"""
    print("Caching GEO annotation and extracting labels..")
    df = label.get_labels(taxon)
    print("Writing taxon %s labels to output file %s.." %(taxon,output))
    if platform != None:
        platform = int(str(platform).lstrip("GPL"))
        df = df[df["PlatformID"]==platform]
    if tissue != None:
        tissue = int(str(tissue).lstrip("0"))
        df = df[df["TissueID"]==tissue]
    df.to_csv(output,sep=delimiter)
    print("Finished writing output to %s" %(output))

if __name__ == "__main__":
    write_labels()
